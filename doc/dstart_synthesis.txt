D*
S = set of vertices
Succ(s) incl S = set of successors of vertex s of S
Pred(s) incl S = set of predecessors of vertex s of S
0 < c(s, s') <= infinity = cost from vertex s to vertex s' of Succ(s)
s_start of S = start vertex
s_goal of S = goal vertex
h(s, s') = approx_distance(s, s')
h(s_goal, s_goal) = 0
h(s, s_goal) <= c(s, s') + h(s', s_goal), for all s of S and s' of Succ(s)
g(s) = known distance from s_start to s
rhs(s) = {
 0, if s = s_start
 min(g(s') + c(s', s)), s' of Pred(s), otherwise
}
g*(s) = estimate of start distance (?)
f(s) = g*(s) + h(s, s_goal)
k1(s) = min(g(s), rhs(s)) + h(s, s_goal)
k2(s) = min(g(s), rhs(s))
k(s) = [k1(s), k2(s)]
k(s1) <= k(s2) <=> (k1(s1)< k1(s2)) or (k1(s1)==k1(s2) and k2(s1)<=k2(s2))

/**/
class PriorityQueue{
	var pq;
	function Top(){
		return vertex with smallest priority;
	}
	function TopKey(){
		if(this.isEmpty){
			return [infinity; infinity];
		}
		return samllest priority;
	}
	function Pop(){
		var x = this.Top();
		Remove(x);
		return x;
	}
	function Insert(s, priority){
		pq.insert(s, priority);
	}
	function Remove(s){
		pq.remove(s);
	}
};


/**/
CalcKey(s){
	return [min(g(s), rhs(s)) + h(s_start, s) + k_m; min(g(s), rhs(s))];
}
Initialize(){
	U = new PriorityQueue();
	k_m = 0;
	for(s of S){
		rhs[s] = g[s] = infinity;
	}
	rhs[s_goal] = 0;
	U.Insert(s_goal, CalcKey(s_goal));
}

